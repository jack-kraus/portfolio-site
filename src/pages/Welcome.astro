---
import '@fontsource-variable/fraunces';

import levelerImage from "../assets/leveler.png";
import miniGolfImage from "../assets/mini_golf.png";

import TextAnimate from '../components/TextAnimate.astro';
import Project from '../components/project.astro';

import skills from "../data/skills.json";
import Skill from '../components/Skill.astro';
import OrbitObject from '../components/orbitObject.astro';

const firstName = "Jack";
const lastName = "Kraus";

interface Project {
	title : string,
	description : string,
	image : string,
	github : string
}

const projects : Project[] = [
	{ title : "Leveler", description: "A video game review site", image: levelerImage.src, github: "jack-kraus/game-tracker" },
	{ title : "Harbor Currents", description: "A navigation app", image: levelerImage.src, github: "jack-kraus/game-tracker" },
	{ title : "Mini Golf", description: "An html5 canvas game", image: miniGolfImage.src, github: "jack-kraus/Mini-Golf-Game" },
	{ title : "Job Application Tracker", description: "A tracker for applications", image: levelerImage.src, github: "CS546-Team23/Job-Application-Tracker" },
	{ title : "Tkinter Minesweeper", description: "A minesweeper game in Python", image: levelerImage.src, github: "jack-kraus/Tkinter-Minesweeper" }
];

function range(length : number) {
	let i = length;
	const out = [];
	while (i > -length) {
		out.push(i);
		i--;
	}
	return out;
}

const circleLength = 15;
const circleMaxWidth = 10;
const circleMinWidth = 3;
const circleDiff = 30;


const search = Astro.url.searchParams.get('filter') || '';
---

<main>
	<div id="background" class="fixed w-screen h-screen -z-10">
	</div>

	<div class="fixed h-screen top-0 left-0" id="scrollContainer" class="-z-10">
		<svg width={circleMaxWidth+5} height="100%" class="blur-svg">
			{range(circleLength).map((i) => {
				const circleDimension = (circleMaxWidth - circleMinWidth) * 0.5 * (Math.cos(i * Math.PI / circleLength) + 1) + circleMinWidth;
				return <circle
					r={circleDimension / 2}
					cx={circleMaxWidth / 2 + 2.5}
					cy={circleDiff * i / circleLength + circleDiff}
					class="circles"
					fill={`white`}
					style={{"transition-duration": `${0.05 + Math.abs(i) / circleLength * 0.05}s`}}
				/>;
			})}
		</svg>
	</div>

	<section id="overview" class="relative">
		<div id="orbitParent" class="absolute left-0 top-0 flex justify-center align-middle w-full h-full">
			<OrbitObject link="#projects" offset={firstName.length + lastName.length + 5}>Projects</OrbitObject>
			<OrbitObject link="#skills" offset={firstName.length + lastName.length + 5}>Skills</OrbitObject>
			<OrbitObject link="/jackk_resume.pdf" offset={firstName.length + lastName.length + 5}>
				Resume<span class="material-symbols-outlined inline">download</span>
			</OrbitObject>
		</div>
		<div class="intro align-middle">
			<div class="z-10">
				<TextAnimate text={firstName}/>
				<h1 class="text-nowrap inline">&nbsp;</h1>
				<TextAnimate text={lastName} offset={firstName.length}/>
			</div>
			<h2 class="text-gray-400 animated z-10" style={{"animation-delay" : `${(firstName.length+lastName.length)*100}ms`}}>Software Developer</h2>
		</div>
	</section>

	<section id="projects">
		<div class="intro align-middle">
			<div>
				<TextAnimate text="Projects"/>
			</div>
			<div class="projects-grid object-contain p-5 gap-5 max-w-full stagger">
				{projects.map((project, index) => <Project title={project.title} description={project.description} image={project.image} index={index} github={project.github}/>)}
			</div>
		</div> 
	</section>
	
	<section id="skills">
		<div class="intro align-middle">
			<div>
				<TextAnimate text="Skills"/>
			</div>
			{skills.map(({ category, list }, index) => <div class="flex flex-col align-middle justify-center">
				<h2 class="text-gray-400 animated z-10 text-center" style={{"animation-delay" : `${("Skills".length + index) * 100}ms`}}>{category}</h2>
				<div class="flex gap-2 flex-wrap justify-center">
					{list.map((item : any, i) => <Skill text={item.text} index={i} filterable={item.filterable}/>)}
				</div>
			</div>)}
		</div>
	</section>
</main>

<style>
	@keyframes orbit1 {
		0% {
			z-index: 10;
			transform: perspective(2000px) rotate3d(calc(1vw / 1vh), 1, 0, 0deg) translate3d(15vw, -15vw, 0px) rotate3d(calc(1vw / 1vh), 1, 0, 0deg);
		}

		25% {
			z-index: 0;
		}

		50% {
			z-index: 10;
		}

		75% {
			z-index: 20;
		}

		100% {
			z-index: 10;
			transform: perspective(2000px) rotate3d(calc(1vw / 1vh), 1, 0, 360deg) translate3d(15vw, -15vw, 0px) rotate3d(calc(1vw / 1vh), 1, 0, -360deg);
		}
	}

	@keyframes fadein {
		0% {
			opacity: 0;
		}

		100% {
			opacity: 1;
		}
	}

	#scrollContainer {
		padding: 3rem;
		transition: padding 0.2s ease-out;
	}

	.blur-svg {
		filter: brightness(2) contrast(17);
		background-color: black;
		margin: 20px;
	}

	.blur-svg circle {
		filter: blur(2px);
	}

	body {
		background-color: black;
		height: 1000px;
	}

	#circle {
		top: 0px;
		transition: top linear;
		transition-duration: 0.1s;
	}

	.intro {
		display: flex;
		align-self: flex-start;
		flex-direction: column;
		width: 100%;
		height: 100%;
		justify-content: center;
		align-items: center;
	}

	section {
		width: 100%;
		height: 100vh;
		scroll-snap-align: center;
		padding: 40px;
	}

	.three {
		animation: orbitIn 2s ease-in-out, orbitOut 2s ease-in-out;
	}

	

	@keyframes fadein {
		0% {
			opacity: 0;
			translate: 0px 10px;
		}
		75% {
			translate: 0px -5px;
		}
		100% {
			opacity: 1;
			translate: 0px 0px;
		}
	}

	.projects-grid {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		grid-template-rows: repeat(2, 1fr);
		width: 750px;
	}
	
	@media only screen and (max-width: 800px) {
		.projects-grid {
			grid-template-columns: repeat(2, 1fr);
			grid-template-rows: repeat(3, 1fr);
		}

		#scrollContainer {
			padding: 1rem;
		}
	}

	#background {
		background: radial-gradient(#160f2e 0%, #000000 70%);
	}
</style>

<style is:global>
	.paused {
		animation-play-state: paused !important;
	}

	:root {
		--purple: #ad6ed1;
	}

	.notransition {
		-webkit-transition: none !important;
		-moz-transition: none !important;
		-o-transition: none !important;
		transition: none !important;
	}

	.overlap {
		position: absolute;
		top: 0;
		left: 0;
	}

	h1 {
		font-size: 5rem;
		color: white;
		display: inline-block;
		font-weight: 700;
	}

	h1, h2, h3, p, button, li, div {
		font-family: 'Fraunces Variable', serif;
		transition: font-size 0.1s ease-out;
	}

	h2.animated {
		animation: fadein 600ms ease-in-out both;
	}

	h2 {
		font-size: 2.5rem;
		font-weight: 300;
	}

	p {
		font-weight: 300;
	}

	@media only screen and (max-width: 600px) {
		h1 {
			font-size: 3.5rem;
		}

		h2 {
			font-size: 1.5rem;
		}
	}
</style>

<script define:vars={{circleLength, circleMinWidth, circleMaxWidth, circleDiff}}>
	function currentScrollPercentage()
	{
		return (document.documentElement.scrollTop + document.body.scrollTop) / (document.documentElement.scrollHeight - document.documentElement.clientHeight);
	}

	const snapItems = document.querySelectorAll('section');
	const circleItems = document.getElementsByTagName('circle');


	function resetAnimations() {
		snapItems.forEach((item) => {
			const rect = item.getBoundingClientRect();
			if (rect.top >= 0 && Math.floor(rect.bottom) <= window.innerHeight) {
				$(".animated").each(function () {
					// reset all animations
					this.style.animationName = 'none';
					this.offsetHeight;
					this.style.animationName = '';

					if ($.contains(item, this)) {
						$(this).removeClass("paused");
						
					}
					else {
						$(this).addClass("paused");
					}
				});
			}
		});
	}

	resetAnimations();

	window.addEventListener('scroll', () => {
		resetAnimations();

		// TODO: Do on screen resize too, and on load
		Array.from(circleItems).forEach((item) => {
			const ratio = currentScrollPercentage();
			const { height } = item.getBoundingClientRect();
			const heightSpace = $(item).parent().height() - height - circleDiff * 2;
			const topTarget = heightSpace * ratio;
			item.style.transform = `translate(0px, ${topTarget}px)`;
		});
	});

	$(".project-card").on("animationend", function() {
		$(this).addClass("transition-allowed");
	}).on("animationstart", function() {
		$(this).removeClass("transition-allowed");
	});
</script>

<script>
    const modals = document.getElementsByClassName("project-modal");

    for (let i = 0; i < modals.length; i++) {
		const element = modals[i];

        $(element).find("button").on("click", () => {
			$(".project-modal").animate({ height: "0" }, 500, function() { $(this).css("display", "none"); });
        });
    }
</script>