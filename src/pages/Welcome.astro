---
// assets
import '@fontsource-variable/fraunces';

// components
import TextAnimate from '../components/TextAnimate.astro';
import Project from '../components/Project.astro';
import skills from "../data/skills.json";
import Skill from '../components/Skill.astro';
import OrbitObject from '../components/OrbitObject.astro';
import Scrollbar from '../components/Scrollbar.astro';

// data
import { projects } from '../data/projects';
const name = "Jack Kraus";
---

<div id="scroll-container">
	<Scrollbar/>
	<main>
		<section id="overview" class="relative">
			<div id="orbitParent" class="absolute left-0 top-0 flex justify-center align-middle w-full h-full">
				<OrbitObject link="#projects" offset={name.length + 5}>Projects</OrbitObject>
				<OrbitObject link="#skills" offset={name.length + 5}>Skills</OrbitObject>
				<OrbitObject link="/jackk_resume.pdf" offset={name.length + 5}>
					Resume<span class="material-symbols-outlined inline">download</span>
				</OrbitObject>
			</div>
			<div class="intro align-middle">
				<TextAnimate text={name}/>
				<h2 class="text-gray-400 animated z-10" style={{"animation-delay" : `${(name.length)*100}ms`}}>
					Software Developer
				</h2>
			</div>
		</section>

		<section id="projects">
			<div class="intro align-middle">
				<TextAnimate text="Projects"/>
				<div class="grid-container max-w-full max-h-full overflow-y-scroll">
					<div class="projects-grid object-contain">
						{projects.map((project, index) => <Project {...project} index={index}/>)}
					</div>
				</div>
			</div> 
		</section>
		
		<section id="skills">
			<div class="intro align-middle">
				<TextAnimate text="Skills"/>
				<div class="flex flex-col gap-3">
					{skills.map(({ category, list }, index) => <div class="flex flex-col align-middle justify-center skill-container">
						<h2 class="text-gray-400 animated z-10 m-3 self-center text-left" style={{"animation-delay" : `${("Skills".length + index) * 100}ms`}}>{category}</h2>
						<div class="flex gap-2 flex-wrap justify-center">
							{list.map((item : any, i) => <Skill text={item.text} index={i} filterable={item.filterable}/>)}
						</div>
					</div>)}
				</div>
			</div>
		</section>
	</main>
</div>

<style>
	.skill-container {
		flex-direction: column;
	}

	#scroll-container {
		height: 100svh;
		overflow-y: scroll;
		scroll-snap-type: y mandatory;
	}

	.intro {
		display: flex;
		align-self: flex-start;
		flex-direction: column;
		width: 100%;
		height: 100%;
		justify-content: center;
		align-items: center;
	}

	section {
		width: 100%;
		height: 100svh;
		scroll-snap-align: center;
		padding: 40px;
	}

	.three {
		animation: orbitIn 2s ease-in-out, orbitOut 2s ease-in-out;
	}

	@keyframes fadein {
		0% {
			opacity: 0;
			translate: 0px 10px;
		}
		75% {
			translate: 0px -5px;
		}
		100% {
			opacity: 1;
			translate: 0px 0px;
		}
	}

	.grid-container {
		--columns: 3;
		--rows: 2;
		width: 1100px;
		aspect-ratio: calc(32 * var(--columns)) / calc(19 * var(--rows));
		scroll-snap-type: y proximity;
	}

	.projects-grid {
		display: grid;
		grid-template-columns: repeat(var(--columns), 1fr);
	}
	
	@media only screen and (max-width: 1000px) {
		.grid-container {
			--columns: 2;
		}
	}

	@media only screen and (max-width: 525px) {
		.grid-container {
			--columns: 1;
		}
	}

	@media only screen and (max-height: 600px) {
		.grid-container {
			--rows: 1;
		}

		.skill-container {
			flex-direction: row;
			justify-content: space-between;
		}

		.skill-container div {
			justify-content: flex-end;
		}
	}
</style>

<style is:global>
	.paused {
		animation-play-state: paused !important;
	}

	:root {
		--purple: #ad6ed1;
	}

	.overlap {
		position: absolute;
		top: 0;
		left: 0;
	}

	h1, h2, h3, p, button, li, div {
		font-family: 'Fraunces Variable', serif;
	}

	h2.animated {
		animation: fadein 600ms ease-in-out both;
	}

	h1 {
		font-size: 5rem;
		color: white;
		display: inline-block;
		font-weight: 700;
	}

	h2 {
		font-size: 2rem;
		font-weight: 300;
	}

	p {
		font-weight: 300;
	}

	@media only screen and (max-width: 1100px) {
		h1 {
			font-size: 4rem;
		}

		h2 {
			font-size: 1.5rem;
		}
	}

	@media only screen and ((max-width: 525px) or (max-height: 525px)) {
		h1 {
			font-size: 2.5rem;
		}

		h2 {
			font-size: 1rem;
		}
	}

	
</style>

<script>
	$(window).on("resize", () => {
		$(".orbitObject").css("--orbit-radius", Math.min(window.innerWidth * 0.35, window.innerHeight * 0.35) + 'px');
	});

	$(".grid-container").on("scroll", (e) => {
		e.stopPropagation();
	})

	const snapItems = document.querySelectorAll('section');

	function resetAnimations() {
		snapItems.forEach((item) => {
			const rect = item.getBoundingClientRect();
			if (rect.top >= 0 && Math.floor(rect.bottom) <= window.innerHeight) {
				$(".animated").each(function () {
					// reset all animations
					this.style.animationName = 'none';
					this.offsetHeight;
					this.style.animationName = '';

					if ($.contains(item, this)) {
						$(this).removeClass("paused");
						
					}
					else {
						$(this).addClass("paused");
					}
				});
			}
		});
	}

	resetAnimations();

	$("#scroll-container").on('scroll', (e) => {
		resetAnimations();
	});

	$(".project-card").on("animationend", function() {
		$(this).addClass("transition-allowed");
	}).on("animationstart", function() {
		$(this).removeClass("transition-allowed");
	});

	const modals = document.getElementsByClassName("project-modal");

    for (let i = 0; i < modals.length; i++) {
		const element = modals[i];

        $(element).find("button").on("click", () => {
			$(".project-modal").animate({ height: "0" }, 500, function() { $(this).css("display", "none"); });
        });
    }

	$(".touchable").on("touchstart", () => {});
</script>