---
import '@fontsource-variable/fraunces';
import Project from "../components/Project.astro";

import levelerImage from "../assets/leveler.png";
import TextAnimate from '../components/TextAnimate.astro';

const firstName = "Jack";
const lastName = "Kraus";

interface Project {
	title : string,
	description : string,
	image : string,
	github : string
}

const projects : Project[] = [
	{ title : "Leveler", description: "a video game review site", image: levelerImage.src, github:"jack-kraus/game-tracker" },
	{ title : "Harbor Currents", description: "a navigation app", image: levelerImage.src, github:"jack-kraus/game-tracker" },
	{ title : "Mini Golf", description: "a html5 canvas game", image: levelerImage.src, github:"jack-kraus/Mini-Golf-Game" },
	{ title : "Job Application Tracker", description: "a tracker for applications", image: levelerImage.src, github:"CS546-Team23/Job-Application-Tracker" }
];

const skills = [
	{ category : "Programming Languages", list : "Python, Java, C, C++, JavaScript, Typescript, OCaml, R" },
	{ category : "Web Development", list : "HTML, CSS, React/React Native, MongoDB, PostgreSQL, Express, Tailwind, Sass" },
	{ category : "Collaboration", list : "Github, Gitlab, Slack, Figma, Jira, Microsoft Suite, Google Suite, Photoshop" }
]

function range(length : number) {
	let i = length;
	const out = [];
	while (i > -length) {
		out.push(i);
		i--;
	}
	return out;
}
const circleLength = 12;
---

<main>
	<div class="fixed h-screen top-0 left-0">
		{range(circleLength).map((i) => {
			return <div class={`bg-white rounded-full w-20 h-20 absolute transition-all circles ${i < 0 ? "-" : ""}cindex-${Math.abs(i)}`}/>;
		})}
		<div class="bg-white" id="path"></div>
	</div>

	<section id="overview">
		<div class="intro align-middle">
			<div>
				<TextAnimate text={firstName}/>
				<h1 class="text-nowrap inline">&nbsp;</h1>
				<TextAnimate text={lastName} offset={firstName.length}/>
			</div>
			<h2 class="text-gray-400 animated" style={{"animation-delay" : `${(firstName.length+lastName.length)*100}ms`}}>Software Developer</h2>
		</div>
	</section>

	<section id="projects">
		<div class="intro align-middle">
			<h1>Projects</h1>
			<div>
				<div class="projects-grid object-contain p-5 gap-5">
					{projects.map((project, index) => <Project title={project.title} description={project.description} image={project.image} index={index} github={project.github}/>)}
				</div>
			</div>
		</div> 
	</section>
	
	<section>
		<div class="intro align-middle">
			{skills.map(({ category, list }) => <div class="flex flex-col align-middle justify-center">
				<h2 class="text-center">{category}</h2>
				<div class="flex gap-2 flex-wrap justify-center">{list.split(", ").map((item) => <p class="bg-purple-500 p-2 rounded-md">{item}</p>)}</div>
			</div>)}
		</div>
	</section>
	
	<section></section>
	<section></section>
	<section></section>
</main>

<style>
	body {
		background-color: black;
		height: 1000px;
	}

	#circle {
		top: 0px;
		transition: top linear;
		transition-duration: 0.1s;
	}

	.intro {
		display: flex;
		align-self: flex-start;
		flex-direction: column;
		width: 100%;
		height: 100%;
		justify-content: center;
		align-items: center;
		max-width: 100vw;
	}

	section {
		width: 100%;
		height: 100vh;
		scroll-snap-align: center;
	}

	.three {
		animation: orbitIn 2s ease-in-out, orbitOut 2s ease-in-out;
	}

	@keyframes fadein {
		0% {
			opacity: 0;
			translate: 0px 10px;
		}
		75% {
			translate: 0px -5px;
		}
		100% {
			opacity: 1;
			translate: 0px 0px;
		}
	}

	.projects-grid {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
	}
	
	@media only screen and (max-width: 600px) {
		.projects-grid {
			grid-template-columns: repeat(2, 1fr);
		}
	}
</style>

<style is:global>
	.overlap {
		position: absolute;
		top: 0;
		left: 0;
	}

	h1 {
		font-size: 5rem;
		color: white;
		display: inline-block;
		font-weight: 700;
	}

	h1, h2, h3, p, button, li, div {
		font-family: 'Fraunces Variable', serif;
	}

	h1.animated, h2.animated {
		animation: fadein 600ms ease-in-out both;
	}

	h2 {
		font-size: 2.5rem;
		font-weight: 300;
	}

	p {
		font-weight: 300;
	}

	@media only screen and (max-width: 600px) {
		h1 {
			font-size: 3.5rem;
		}

		h2 {
			font-size: 1.5rem;
		}
	}
</style>

<script>
	function currentScrollPercentage()
	{
		return (document.documentElement.scrollTop + document.body.scrollTop) / (document.documentElement.scrollHeight - document.documentElement.clientHeight);
	}

	function clamp(num : number, min : number, max : number) {
		return num <= min 
			? min 
			: num >= max 
			? max 
			: num
	}

	const snapItems = document.querySelectorAll('section');
	const circleItems = document.querySelectorAll<HTMLElement>('.circles');
	const body = document.body;
	const circleLength = 12;

	window.addEventListener('scroll', () => {
		snapItems.forEach((item) => {
			const rect = item.getBoundingClientRect();
			if (rect.top >= 0 && Math.floor(rect.bottom) <= window.innerHeight) {
				document.querySelectorAll<HTMLElement>(".animated").forEach((el) => {
					// reset all animations
					el.style.animationName = 'none';
					el.offsetHeight;
					el.style.animationName = '';

					// play the animation if in current section
					el.style.animationPlayState = item.contains(el) ? "running" : "paused";
				});
			}
		});

		circleItems.forEach((item) => {
			const ratio = currentScrollPercentage();
			const indexString = Array.from(item.classList).filter((it) => it.includes("cindex-"))[0];
			const index = (indexString[0] === "-" ? -1 : 1) * (parseInt(indexString[indexString.length-1]));

			const { height } = item.getBoundingClientRect();
			

			

			const circleMaxWidth = 15;
			const circleMinWidth = 7;

			const circleSubtract = 3;
			const circleDiff = 50;
			const heightSpace = window.innerHeight - height - circleDiff * 2;

			// console.log(topRatio);
			const duration = 0.05 + Math.abs(index) / circleLength * 0.05;
			//if (duration) console.log(duration, topRatio, duration * topRatio);
			item.style.transitionDuration = `${duration}s`;
			const circleDimension = (circleMaxWidth - circleMinWidth) * 0.5 * (Math.cos(index * Math.PI / circleLength) + 1) + circleMinWidth;

			item.style.width = `${circleDimension}px`;
			item.style.height = `${circleDimension}px`;
			item.style.left = `${(circleMaxWidth - circleDimension) / 3}px`;

			const topTarget = heightSpace * ratio + circleDiff * index / circleLength + circleDiff;
			item.style.top = `${topTarget}px`;
		});

		const path = document.getElementById("path");
		if (path) {
			path.style.clipPath = "";
			let clip = "";
			Array.from(circleItems).sort((item : HTMLElement) => {
				const indexString = Array.from(item.classList).filter((it) => it.includes("cindex-"))[0];
				const index = (indexString[0] === "-" ? -1 : 1) * (parseInt(indexString[indexString.length-1]));
				return index;
			});
		}
	});

	

	
	

</script>

<script>
    const modals = document.getElementsByClassName("project-modal");
    
    function currentScrollPercentage(element : Element)
	{
        if (!element) return 0;
		return element.scrollTop / (element.scrollHeight - element.clientHeight);
	}

    for (let i = 0; i < modals.length; i++) {
		const element = modals[i];

        $(element).find("article").on("scroll", () => {
            const percent = currentScrollPercentage(element);
            if (percent < 0.01) $(element).addClass("top").removeClass("bottom");
            else if (percent > 0.99) $(element).addClass("bottom").removeClass("top");
            else $(element).removeClass("bottom").removeClass("top");
        });

        $(element).find("button").on("click", () => {
			$(".project-modal").hide();
        });

        $(element).hide();
    }
</script>