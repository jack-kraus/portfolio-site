---
import '@fontsource-variable/fraunces';
import { Vector } from '../code/vector';
import Project from '../components/project.astro';

import { Image } from 'astro:assets';
import levelerImage from "../assets/leveler.png";


const firstName = "Jack";
const lastName = "Kraus";

const projects = [
	{ title : "Leveler", description: "a video game review site", image: levelerImage.src },
	{ title : "Harbor Currents", description: "a navigation app", image: levelerImage.src },
	{ title : "Mini Golf", description: "a html5 canvas game", image: levelerImage.src }
];

function range(length : number) {
	let i = length;
	const out = [];
	while (i > -length) {
		out.push(i);
		i--;
	}
	return out;
}
const circleLength = 12;
---

<main>
	<div class="fixed h-screen top-0 left-0">
		{range(circleLength).map((i) => {
			return <div class={`bg-white rounded-full w-20 h-20 absolute transition-all circles ${i < 0 ? "-" : ""}cindex-${Math.abs(i)}`}/>;
		})}
		<div class="bg-white" id="path"></div>
	</div>

	<section id="overview">
		<div class="intro align-middle">
			<div>
				{firstName.split("").map((char, i) => <h1 class="animated shrink text-nowrap block" style={{"animation-delay" : `${i*100}ms`}}>{char}</h1>)}
				<h1 class="text-nowrap block">&nbsp;</h1>
				{lastName.split("").map((char, i) => <h1 class="animated shrink text-nowrap block" style={{"animation-delay" : `${(firstName.length+i)*100}ms`}}>{char}</h1>)}
			</div>
			<h2 class="text-gray-400 animated" style={{"animation-delay" : `${(firstName.length+lastName.length)*100}ms`}}>Software Developer</h2>
		</div>
	</section>
	<section>
		<div class="intro align-middle">
			<h1>Projects</h1>
			<div>
				<div class="projects-grid object-contain">
					{projects.map((project) => <div class="project-item aspect-video w-48 m-5 relative">
						<div class="bg-purple-500 w-full h-full rounded-lg relative top-0 left-0 front" style={{ backgroundImage: `url(${levelerImage.src})`, backgroundSize: "cover" }}>
							<div class="w-full h-full flex flex-col justify-center align-middle">
								<h3 class="text-white self-start mx-auto shadow-md">{project.title}</h3>
							</div>
						</div>
						<div class="bg-gray-600 w-full h-full rounded-lg absolute top-0 left-0 back"><p class="text-white">{project.description}</p><button>go to project</button></div>
					</div>)}
				</div>
			</div>
		</div> 
	</section>

	<!-- <section id="projects">
		<div class="max-w-full h-full bg-red-500 object-contain">
			<div class="max-h-full max-w-full justify-center align-middle bg-blue-600 overflow-hidden p-10 m-auto projects-parent">
				<div class="bg-green-500 overflow-y-scroll max-w-full aspect-video snap-y">
					<div class="projects-grid object-contain max-w-full">
						{Array.apply(null, Array(20)).map(() => <div class="bg-purple-600 rounded-lg snap-start aspect-video"></div>)}
					</div>
				</div>
			</div>
		</div>
	</section>
	
	
	
	-->
	<section></section>
	<section></section>
	<section></section>
	<section></section>
</main>

<style>
	body {
		background-color: black;
		height: 1000px;
	}

	#circle {
		top: 0px;
		transition: top linear;
		transition-duration: 0.1s;
	}

	.intro {
		display: flex;
		align-self: flex-start;
		flex-direction: column;
		width: 100%;
		height: 100%;
		justify-content: center;
		align-items: center;
		max-width: 100vw;
	}

	section {
		width: 100%;
		height: 100vh;
		scroll-snap-align: center;
	}

	.three {
		animation: orbitIn 2s ease-in-out, orbitOut 2s ease-in-out;
	}

	@keyframes fadein {
		0% {
			opacity: 0;
			translate: 0px 10px;
		}
		75% {
			translate: 0px -5px;
		}
		100% {
			opacity: 1;
			translate: 0px 0px;
		}
	}

	h1 {
		font-size: 5rem;
		color: white;
		display: inline-block;
		font-weight: 700;
	}

	h1, h2, h3{
		font-family: 'Fraunces Variable', serif;
	}

	h1.animated, h2.animated {
		animation: fadein 600ms ease-in-out both;
	}

	h2 {
		font-size: 2.5rem;
		font-weight: 300;
	}

	.projects-grid {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
	}

	.projects-parent {
		aspect-ratio: 3 / 4;
	}

	.project-item div {
		transition-property: transform, z-index;
		transition-duration: 0.75s;
		transform-origin: center;
	}

	.project-item:hover div {
		transform: perspective(500px) rotate3d(0, 1, 0, 180deg);
	}

	.project-item div.front, .project-item:hover div.back {
		z-index: 10;
	}

	.project-item div.back * {
		scale: -1 1;
	}

	.project-item div.back, .project-item:hover div.front {
		z-index: 0;
	}
	
	@media only screen and (max-width: 600px) {
		.projects-grid {
			grid-template-columns: repeat(3, calc((100% - 20px) / 2));
		}
	}
</style>

<style is:global>
	.overlap {
		position: absolute;
		top: 0;
		left: 0;
	}
</style>

<script>
	function currentScrollPercentage()
	{
		return (document.documentElement.scrollTop + document.body.scrollTop) / (document.documentElement.scrollHeight - document.documentElement.clientHeight);
	}

	function clamp(num : number, min : number, max : number) {
		return num <= min 
			? min 
			: num >= max 
			? max 
			: num
	}

	const snapItems = document.querySelectorAll('section');
	const circleItems = document.querySelectorAll<HTMLElement>('.circles');
	const body = document.body;
	const circleLength = 12;

	window.addEventListener('scroll', () => {
		snapItems.forEach((item) => {
			const rect = item.getBoundingClientRect();
			console.log(rect);
			console.log(window.innerHeight);
			if (rect.top >= 0 && Math.floor(rect.bottom) <= window.innerHeight) {
				document.querySelectorAll<HTMLElement>(".animated").forEach((el) => {
					// reset all animations
					el.style.animationName = 'none';
					el.offsetHeight;
					el.style.animationName = '';

					// play the animation if in current section
					el.style.animationPlayState = item.contains(el) ? "running" : "paused";
				});
			}
		});

		circleItems.forEach((item) => {
			const ratio = currentScrollPercentage();
			const indexString = Array.from(item.classList).filter((it) => it.includes("cindex-"))[0];
			const index = (indexString[0] === "-" ? -1 : 1) * (parseInt(indexString[indexString.length-1]));

			const { height } = item.getBoundingClientRect();
			

			

			const circleMaxWidth = 15;
			const circleMinWidth = 7;

			const circleSubtract = 3;
			const circleDiff = 50;
			const heightSpace = window.innerHeight - height - circleDiff * 2;

			// console.log(topRatio);
			const duration = 0.05 + Math.abs(index) / circleLength * 0.05;
			//if (duration) console.log(duration, topRatio, duration * topRatio);
			item.style.transitionDuration = `${duration}s`;
			const circleDimension = (circleMaxWidth - circleMinWidth) * 0.5 * (Math.cos(index * Math.PI / circleLength) + 1) + circleMinWidth;

			item.style.width = `${circleDimension}px`;
			item.style.height = `${circleDimension}px`;
			item.style.left = `${(circleMaxWidth - circleDimension) / 3}px`;

			const topTarget = heightSpace * ratio + circleDiff * index / circleLength + circleDiff;
			item.style.top = `${topTarget}px`;
		});

		const path = document.getElementById("path");
		if (path) {
			path.style.clipPath = "";
			let clip = "";
			Array.from(circleItems).sort((item : HTMLElement) => {
				const indexString = Array.from(item.classList).filter((it) => it.includes("cindex-"))[0];
				const index = (indexString[0] === "-" ? -1 : 1) * (parseInt(indexString[indexString.length-1]));
				return index;
			});
		}
	});

	

	
	

</script>