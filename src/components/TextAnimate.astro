---
let { text, offset } = Astro.props;
offset ??= 0;

const interleave = (arr : any[], item: any) => {
	const outArray = [];
	for (let i = 0; i < arr.length; i++) {
		outArray.push(arr[i]);
		if (i < arr.length - 1) {
			outArray.push(item);
		}
	}
	return outArray;
}

const words = text.split(" ");
const wordLengths = words.map((item : string) => item.length);
---

<div class="flex flex-row flex-wrap justify-center gap-3 p-5">
	{text.split(" ").map((word : string, i : number) => {
		const delayOuter = wordLengths.slice(0, i).reduce((partial : number, a : number) => partial + a, 0);
		return <div class="inline">
			{
				word.split("").map((char : string, j : number) => {
					const delay = delayOuter + j;
					return <h1 class="animated text-nowrap" style={{"animation-delay" : `${(offset + delay)*100}ms`}}>{char}</h1>;
				})
			}
		</div>
	})}
</div>

<style>
    @keyframes fadein {
		0% {
			opacity: 0;
			translate: 0px 10px;
		}
		75% {
			translate: 0px -5px;
			
		}
		100% {
			opacity: 1;
			translate: 0px 0px;
		}
	}

    h1.animated, h2.animated {
		animation: 600ms ease-in-out both fadein;
		transition: color 500ms;
		margin: 0;
		padding: 0;
		line-height: 1;
	}
	
	h1.animated:hover, h2.animated:hover {
		color: #ad6ed1;
	}
</style>